# Generated by Django 5.2.4 on 2025-07-10 09:16

import deeptalk.models
import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DeepTalkUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('avatar_url', models.URLField(blank=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('occupation', models.CharField(blank=True, max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('subscription_tier', models.CharField(choices=[('free', 'Free'), ('premium', 'Premium'), ('pro', 'Pro')], default='free', max_length=20)),
                ('last_login_at', models.DateTimeField(blank=True, null=True)),
                ('email_verified_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='deeptalk_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'deeptalk_users',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('tags', models.JSONField(blank=True, default=deeptalk.models.default_list)),
                ('deadline', models.DateTimeField(blank=True, null=True)),
                ('duration_minutes', models.IntegerField(blank=True, null=True)),
                ('specific_time', models.DateTimeField(blank=True, null=True)),
                ('estimated_duration_minutes', models.IntegerField(default=60)),
                ('minimum_duration_minutes', models.IntegerField(blank=True, null=True)),
                ('maximum_duration_minutes', models.IntegerField(blank=True, null=True)),
                ('base_priority', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('urgency_multiplier', models.DecimalField(decimal_places=2, default=Decimal('1.00'), max_digits=3)),
                ('can_be_split', models.BooleanField(default=True)),
                ('requires_consecutive_time', models.BooleanField(default=False)),
                ('preferred_time_of_day', models.JSONField(blank=True, default=deeptalk.models.default_list)),
                ('avoid_time_of_day', models.JSONField(blank=True, default=deeptalk.models.default_list)),
                ('preferred_completion_time', models.DateTimeField(blank=True, null=True)),
                ('deadline_flexibility_minutes', models.IntegerField(default=0)),
                ('is_repeat', models.BooleanField(default=False)),
                ('repeat_pattern', models.CharField(blank=True, choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly'), ('custom', 'Custom')], max_length=50)),
                ('repeat_frequency', models.IntegerField(default=1)),
                ('repeat_days_of_week', models.JSONField(blank=True, default=deeptalk.models.default_list)),
                ('repeat_end_date', models.DateTimeField(blank=True, null=True)),
                ('priority', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('urgency', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('difficulty_level', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('on_hold', 'On Hold')], default='pending', max_length=20)),
                ('completion_percentage', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('estimated_effort_hours', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('actual_time_spent_minutes', models.IntegerField(default=0)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('required_tools', models.JSONField(blank=True, default=deeptalk.models.default_list)),
                ('prerequisite_tasks', models.JSONField(blank=True, default=deeptalk.models.default_list)),
                ('blocking_tasks', models.JSONField(blank=True, default=deeptalk.models.default_list)),
                ('ai_suggested', models.BooleanField(default=False)),
                ('user_satisfaction_rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('ai_confidence_score', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('typed_in', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('parent_task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_tasks', to='deeptalk.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='deeptalk.deeptalkuser')),
            ],
            options={
                'db_table': 'tasks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('scheduled_start_time', models.DateTimeField()),
                ('scheduled_end_time', models.DateTimeField()),
                ('actual_start_time', models.DateTimeField(blank=True, null=True)),
                ('actual_end_time', models.DateTimeField(blank=True, null=True)),
                ('schedule_type', models.CharField(choices=[('user_planned', 'User Planned'), ('ai_suggested', 'AI Suggested'), ('auto_generated', 'Auto Generated')], default='user_planned', max_length=20)),
                ('is_flexible', models.BooleanField(default=True)),
                ('buffer_time_minutes', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('skipped', 'Skipped'), ('rescheduled', 'Rescheduled')], default='scheduled', max_length=20)),
                ('reschedule_reason', models.CharField(blank=True, max_length=255)),
                ('location', models.CharField(blank=True, max_length=255)),
                ('resources_needed', models.JSONField(blank=True, default=deeptalk.models.default_list)),
                ('calendar_event_id', models.CharField(blank=True, max_length=255)),
                ('ai_optimized', models.BooleanField(default=False)),
                ('optimization_score', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('conflict_resolution_applied', models.BooleanField(default=False)),
                ('reminder_sent', models.BooleanField(default=False)),
                ('notification_times', models.JSONField(blank=True, default=deeptalk.models.default_list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('rescheduled_from', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='deeptalk.schedule')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='deeptalk.deeptalkuser')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='deeptalk.task')),
            ],
            options={
                'db_table': 'schedules',
                'ordering': ['scheduled_start_time'],
            },
        ),
        migrations.CreateModel(
            name='Reminder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reminder_type', models.CharField(choices=[('task_deadline', 'Task Deadline'), ('schedule_start', 'Schedule Start'), ('custom', 'Custom')], max_length=20)),
                ('message', models.TextField()),
                ('reminder_time', models.DateTimeField()),
                ('delivery_method', models.CharField(choices=[('email', 'Email'), ('push', 'Push Notification'), ('sms', 'SMS'), ('in_app', 'In App')], max_length=20)),
                ('is_sent', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('delivery_status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('is_recurring', models.BooleanField(default=False)),
                ('recurrence_pattern', models.CharField(blank=True, max_length=50)),
                ('next_reminder_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='deeptalk.deeptalkuser')),
                ('schedule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='deeptalk.schedule')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reminders', to='deeptalk.task')),
            ],
            options={
                'db_table': 'reminders',
                'ordering': ['reminder_time'],
            },
        ),
        migrations.CreateModel(
            name='TaskCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('color_hex', models.CharField(default='#3498db', max_length=7)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('default_duration', models.IntegerField(blank=True, null=True)),
                ('default_priority', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('is_system_category', models.BooleanField(default=False)),
                ('category_weight', models.DecimalField(decimal_places=2, default=Decimal('1.00'), max_digits=3)),
                ('can_be_split_default', models.BooleanField(default=True)),
                ('requires_focus_time', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='task_categories', to='deeptalk.deeptalkuser')),
            ],
            options={
                'db_table': 'task_categories',
            },
        ),
        migrations.AddField(
            model_name='task',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='deeptalk.taskcategory'),
        ),
        migrations.CreateModel(
            name='TaskDependency',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dependency_type', models.CharField(choices=[('finish_to_start', 'Finish to Start'), ('start_to_start', 'Start to Start'), ('finish_to_finish', 'Finish to Finish'), ('start_to_finish', 'Start to Finish')], default='finish_to_start', max_length=20)),
                ('lag_time_minutes', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('predecessor_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='successor_dependencies', to='deeptalk.task')),
                ('successor_task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='predecessor_dependencies', to='deeptalk.task')),
            ],
            options={
                'db_table': 'task_dependencies',
            },
        ),
        migrations.CreateModel(
            name='TaskLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('created', 'Created'), ('updated', 'Updated'), ('started', 'Started'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('deleted', 'Deleted')], max_length=50)),
                ('previous_values', models.JSONField(blank=True, null=True)),
                ('new_values', models.JSONField(blank=True, null=True)),
                ('action_reason', models.CharField(blank=True, max_length=255)),
                ('triggered_by', models.CharField(choices=[('user', 'User'), ('system', 'System'), ('ai', 'AI')], default='user', max_length=20)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='deeptalk.task')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='task_logs', to='deeptalk.deeptalkuser')),
            ],
            options={
                'db_table': 'task_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TimeBlock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('block_type', models.CharField(choices=[('available', 'Available'), ('busy', 'Busy'), ('break', 'Break'), ('blocked', 'Blocked')], default='available', max_length=20)),
                ('status', models.CharField(choices=[('available', 'Available'), ('reserved', 'Reserved'), ('occupied', 'Occupied')], default='available', max_length=20)),
                ('can_be_split', models.BooleanField(default=True)),
                ('min_task_duration_minutes', models.IntegerField(blank=True, null=True)),
                ('max_task_duration_minutes', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_blocks', to='deeptalk.deeptalkuser')),
            ],
            options={
                'db_table': 'time_blocks',
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('work_start_time', models.TimeField(default='09:00:00')),
                ('work_end_time', models.TimeField(default='17:00:00')),
                ('preferred_work_days', models.JSONField(blank=True, default=deeptalk.models.default_list)),
                ('lunch_break_duration', models.IntegerField(default=60)),
                ('preferred_break_duration', models.IntegerField(default=15)),
                ('default_task_duration', models.IntegerField(default=60)),
                ('max_daily_tasks', models.IntegerField(default=10)),
                ('preferred_task_categories', models.JSONField(blank=True, default=deeptalk.models.default_list)),
                ('avoid_back_to_back_meetings', models.BooleanField(default=True)),
                ('enable_email_notifications', models.BooleanField(default=True)),
                ('enable_push_notifications', models.BooleanField(default=True)),
                ('enable_sms_notifications', models.BooleanField(default=False)),
                ('reminder_lead_time', models.IntegerField(default=15)),
                ('ai_suggestion_frequency', models.CharField(choices=[('low', 'Low'), ('moderate', 'Moderate'), ('high', 'High')], default='moderate', max_length=20)),
                ('auto_schedule_low_priority', models.BooleanField(default=False)),
                ('learning_from_behavior', models.BooleanField(default=True)),
                ('most_productive_hours', models.JSONField(blank=True, default=deeptalk.models.default_list)),
                ('least_productive_hours', models.JSONField(blank=True, default=deeptalk.models.default_list)),
                ('preferred_task_grouping', models.CharField(choices=[('by_category', 'By Category'), ('by_priority', 'By Priority'), ('mixed', 'Mixed')], default='by_category', max_length=20)),
                ('exercise_reminder', models.BooleanField(default=True)),
                ('hydration_reminder', models.BooleanField(default=False)),
                ('screen_break_reminder', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to='deeptalk.deeptalkuser')),
            ],
            options={
                'db_table': 'user_preferences',
            },
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['deadline', 'base_priority'], name='idx_tasks_deadline_priority'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['user', 'status'], name='idx_tasks_user_status'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['estimated_duration_minutes', 'can_be_split'], name='idx_tasks_duration_split'),
        ),
        migrations.AlterUniqueTogether(
            name='taskdependency',
            unique_together={('predecessor_task', 'successor_task')},
        ),
        migrations.AddIndex(
            model_name='timeblock',
            index=models.Index(fields=['user', 'start_time', 'end_time'], name='idx_timeblocks_user_time'),
        ),
        migrations.AddIndex(
            model_name='timeblock',
            index=models.Index(fields=['status', 'block_type'], name='idx_timeblocks_status_type'),
        ),
    ]
